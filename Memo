<div class="todos index">

	<h2><?php echo __('ToDoリスト'); ?></h2>
	<?php echo $this->Form->create(null, array('type' => 'get', 'url' => 'index'));
	if ($wSea) {
		echo $this->Form->input('search', array(
			'label' => 'キーワード',
			'value' => $wSea,
		));
	} else {
		echo $this->Form->input('search', array(
			'label' => 'キーワード',
		));
	}

	echo (__('優先度'));
	if ($wPri) {
		echo $this->Form->input('priority_id', [
			"type" => "select",
			"options" => $select1,
			'multiple' => 'checkbox',
			'selected' => $wPri,
		]);
	} else {
		echo $this->Form->input('priority_id', [
			"type" => "select",
			"options" => $select1,
			'multiple' => 'checkbox',
		]);
	}

	echo (__('日付範囲'));
	if ($wLow) {
		echo $this->Form->input('lower_due', array(
			'label' => '日付下限',
			'type' => 'date',
			'dateFormat' => 'YMD',
			'monthNames' => false,
			'empty' => ['year' => '年', 'month' => '月', 'day' => '日'],
			'selected' => $wLow,

		));
	} else {
		echo $this->Form->input('lower_due', array(
			'label' => '日付下限',
			'type' => 'date',
			'dateFormat' => 'YMD',
			'monthNames' => false,
			'empty' => ['year' => '年', 'month' => '月', 'day' => '日'],
		));
	}

	if ($wHig) {
		echo $this->Form->input('higher_due', array(
			'label' => '日付上限',
			'type' => 'date',
			'dateFormat' => 'YMD',
			'monthNames' => false,
			'empty' => ['year' => '年', 'month' => '月', 'day' => '日'],
			'selected' => $wHig,
		));
	} else {
		echo $this->Form->input('higher_due', array(
			'label' => '日付上限',
			'type' => 'date',
			'dateFormat' => 'YMD',
			'monthNames' => false,
			'empty' => ['year' => '年', 'month' => '月', 'day' => '日'],
		));
	}


	echo (__('並び替え'));
	if ($wSor) {
		echo $this->Form->input('sort', array(
			'label' => '基準',
			'type' => 'select',
			'options' => array(
				'id' => 'id',
				'name' => 'タスク名',
				'priority_id' => '優先度',
				'due' => '期日',
				'created' => '登録日',
				'modified' => '更新日',
			),
			'empty' => '-',
			'selected' => $wSor,
		));
	} else {
		echo $this->Form->input('sort', array(
			'label' => '基準',
			'type' => 'select',
			'options' => array(
				'id' => 'id',
				'name' => 'タスク名',
				'priority_id' => '優先度',
				'due' => '期日',
				'created' => '登録日',
				'modified' => '更新日',
			),
			'empty' => '-',
		));
	}

	if ($wOrd) {
		echo $this->Form->input('order', array(
			'type' => 'select',
			'options' => array(
				'ASC' => '昇順',
				'DESC' => '降順',
			),
			'empty' => '-',
			'selected' => $wOrd,
		));
	} else {
		echo $this->Form->input('order', array(
			'type' => 'select',
			'options' => array(
				'ASC' => '昇順',
				'DESC' => '降順',
			),
			'empty' => '-',
		));
	}


	echo $this->Form->submit('検索');
	echo $this->Form->end();

	echo $this->Html->link('10件', array('?' => array_merge($this->request->query, array('limit' => 10))));
	echo $this->Html->link('20件', array('?' => array_merge($this->request->query, array('limit' => 20))));
	echo $this->Html->link('50件', array('?' => array_merge($this->request->query, array('limit' => 50))));
	?>
	<table cellpadding="0" cellspacing="0">
		<thead>
			<tr>
				<th><?php echo ('id'); ?></th>
				<th><?php echo ('タスク名'); ?></th>
				<th><?php echo ('優先度'); ?></th>
				<th><?php echo ('期日'); ?></th>
				<th><?php echo ('登録日'); ?></th>
				<th><?php echo ('更新日'); ?></th>
				<th class="actions"><?php echo __('アクション'); ?></th>
			</tr>
		</thead>
		<tbody>
			<?php foreach ($todos as $todo) : ?>
				<tr>
					<td><?php echo h($todo['Todo']['id']); ?>&nbsp;</td>
					<td><?php echo h($todo['Todo']['name']); ?>&nbsp;</td>
					<td>
						<?php echo $this->element('priority_label', ['priorityId' => $todo['Todo']['priority_id']]); ?>
						&nbsp;
					</td>
					<td><?php echo h($todo['Todo']['due']); ?>&nbsp;</td>
					<td><?php echo h($todo['Todo']['created']); ?>&nbsp;</td>
					<td><?php echo h($todo['Todo']['modified']); ?>&nbsp;</td>
					<td class="actions">
						<?php echo $this->Html->link(__('View'), array('action' => 'view', $todo['Todo']['id'])); ?>
						<?php echo $this->Html->link(__('Edit'), array('action' => 'edit', $todo['Todo']['id'])); ?>
						<?php echo $this->Form->postLink(__('Delete'), array('action' => 'delete', $todo['Todo']['id']), array('confirm' => __('Are you sure you want to delete # %s?', $todo['Todo']['id']))); ?>
					</td>
				</tr>
			<?php endforeach; ?>
		</tbody>
	</table>
	<p>
		<?php
		echo $this->Paginator->counter(array(
			'format' => __('Page {:page} of {:pages}, showing {:current} records out of {:count} total, starting on record {:start}, ending on {:end}')
		));
		?> </p>
	<div class="paging">
		<?php
		echo $this->Paginator->prev('< ' . __('前へ'), array(), null, array('class' => 'prev disabled'));
		echo $this->Paginator->numbers(array('separator' => ''));
		echo $this->Paginator->next(__('次へ') . ' >', array(), null, array('class' => 'next disabled'));
		?>
	</div>
</div>
<div class="actions">
	<h3><?php echo __('アクション'); ?></h3>
	<ul>
		<li><?php echo $this->Html->link(__('新規登録'), array('action' => 'add')); ?></li>
	</ul>
</div>


	public function index()
	{
		$this->Todo->recursive = 0;
		$limit = isset($this->request->query['limit']) ? $this->request->query['limit'] : 10;


		$this->loadModel('Priority');
		$this->set('select1', $this->Priority->find('list', array(
			'fields' => array('id', 'priority')
		)));

		$conditions = []; // 条件配列の初期化

		if ($this->request->is('get')) {


			//タスク名のキーワード検索(ORの関係)
			if (!empty($this->request->query['search'])) {
				$searches = preg_split('/[ 　]+/u', $this->request->query['search']);
				foreach ($searches as $search) {
					$conditions['OR'][] = array('Todo.name LIKE' => '%' . $search . '%');
					$conditions['OR'][] = array('Todo.detail LIKE' => '%' . $search . '%');
				}
				//'Session'への書き込み
				$this->Session->write('index.search', $this->request->query['search']);
			}

			//優先度の検索(ORの関係)
			if (!empty($this->request->query['priority_id'])) {
				$priorityIds = $this->request->query['priority_id'];
				foreach ($priorityIds as $priorityId) {
					$priorityData['OR'][] = array('Todo.priority_id' => $priorityId);
				}
				$conditions['AND'][] = $priorityData;
				//'Session'への書き込み
				$this->Session->write('index.priority', $this->request->query['priority_id']);
			}

			// //期日範囲の検索
			$lowerDue = null;
			$higherDue = null;
			if (
				!empty($this->request->query['lower_due']['year']) &&
				!empty($this->request->query['lower_due']['month']) &&
				!empty($this->request->query['lower_due']['day'])
			) {
				$yearL = $this->request->query['lower_due']['year'];
				$monthL = $this->request->query['lower_due']['month'];
				$dayL = $this->request->query['lower_due']['day'];
				$lowerDue = sprintf('%s-%s-%s', $yearL, $monthL, $dayL);
				$this->Session->write('index.lower_due', $this->request->query['lower_due']);
			}

			if (
				!empty($this->request->query['higher_due']['year']) &&
				!empty($this->request->query['higher_due']['month']) &&
				!empty($this->request->query['higher_due']['day'])
			) {
				$yearH = $this->request->query['higher_due']['year'];
				$monthH = $this->request->query['higher_due']['month'];
				$dayH = $this->request->query['higher_due']['day'];
				$higherDue = sprintf('%s-%s-%s', $yearH, $monthH, $dayH);
				$this->Session->write('index.higher_due', $this->request->query['higher_due']);
			}

			if (!empty($lowerDue) && !empty($higherDue)) {
				//下限と上限の両方が指定されている場合
				$conditions['AND'][] = array('Todo.due BETWEEN ? AND ?' => array($lowerDue, $higherDue));
			} elseif (!empty($lowerDue)) {
				//下限のみが設定されている場合
				$conditions['AND'][] = array('Todo.due >=' => $lowerDue);
			} elseif (!empty($higherDue)) {
				//上限のみが設定されている場合
				$conditions['AND'][] = array('Todo.due <=' => $higherDue);
			}

			//並び替え条件
			$order = [];
			if (!empty($this->request->query['sort']) && !empty($this->request->query['order'])) {
				$sortCriteria = [
					'id' => 'Todo.id',
					'name' => 'Todo.name',
					'priority_id' => 'Todo.id',
					'due' => 'Todo.due',
					'created' => 'Todo.created',
					'modified' => 'Todo.modified'
				];

				$sort = $this->request->query['sort'];
				$orderDirection = $this->request->query['order'];
				if (array_key_exists($sort, $sortCriteria)) {
					$order = [$sortCriteria[$sort] => $orderDirection];
				}
				$this->Session->write('index.sort', $this->request->query['sort']);
				$this->Session->write('index.order', $this->request->query['order']);
			}
			$this->paginate = array(
				'limit' => $limit,
				'conditions' => $conditions,
				'order' => $order,
			);
			$todos = $this->paginate('Todo');
			$this->set('todos', $todos);
		} else {
			$this->paginate = array(
				'limit' => $limit,
			);
			$todos = $this->paginate('Todo');
			$this->set('todos', $todos);
		}
		$wSea = $this->Session->consume('index.search');
		$wPri = $this->Session->consume('index.priority');
		$wLow = $this->Session->consume('index.lower_due');
		$wHig = $this->Session->consume('index.higher_due');
		$wSor = $this->Session->consume('index.sort');
		$wOrd = $this->Session->consume('index.order');
		$this->set('wSea', $wSea);
		$this->set('wPri', $wPri);
		$this->set('wLow', $wLow);
		$this->set('wHig', $wHig);
		$this->set('wSor', $wSor);
		$this->set('wOrd', $wOrd);
	}
// エラーメッセージ用の配列を初期化
$errorMessages = [];

// 日付の下限値をチェックし、設定
if (!empty($this->request->query['lower_due'])) {
    $lowerDueDate = $this->request->query['lower_due'];
    $lowerDue = $this->adjustAndValidateDate($lowerDueDate['year'], $lowerDueDate['month'], $lowerDueDate['day']);
    if (!$lowerDue) {
        $errorMessages[] = '下限日付が不正です。';
    }
} else {
    $lowerDue = null;
}

// 日付の上限値をチェックし、設定
if (!empty($this->request->query['higher_due'])) {
    $higherDueDate = $this->request->query['higher_due'];
    $higherDue = $this->adjustAndValidateDate($higherDueDate['year'], $higherDueDate['month'], $higherDueDate['day']);
    if (!$higherDue) {
        $errorMessages[] = '上限日付が不正です。';
    }
} else {
    $higherDue = null;
}

// 日付範囲の矛盾をチェック
if (!$this->checkDateRange($lowerDue, $higherDue)) {
    $errorMessages[] = '日付の範囲が矛盾しています。';
}

// エラーメッセージが存在する場合は、すべて表示
if (!empty($errorMessages)) {
    foreach ($errorMessages as $message) {
        $this->Session->setFlash($message, 'default', array(), 'error');
    }
} else {
    // 検索条件への日付範囲の追加処理...
}
