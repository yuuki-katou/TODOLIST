	public function index()
	{
		$this->Todo->recursive = 0;
		$limit = isset($this->request->query['limit']) ? $this->request->query['limit'] : 10;


		$this->loadModel('Priority');
		$this->set('select1', $this->Priority->find('list', array(
			'fields' => array('id', 'priority')
		)));

		$wSea = $this->Session->read('index.search');
		$this->set('wSea', $wSea);

		$conditions = []; // 条件配列の初期化

		if ($this->request->is('get')) {


			//タスク名のキーワード検索(ORの関係)
			if (!empty($this->request->query['search'])) {
				$searches = preg_split('/[ 　]+/u', $this->request->query['search']);
				foreach ($searches as $search) {
					$conditions['OR'][] = array('Todo.name LIKE' => '%' . $search . '%');
					$conditions['OR'][] = array('Todo.detail LIKE' => '%' . $search . '%');
				}
			}

			//優先度の検索(ORの関係)
			if (!empty($this->request->query['priority_id'])) {
				$priorityIds = $this->request->query['priority_id'];
				foreach ($priorityIds as $priorityId) {
					$priorityData['OR'][] = array('Todo.priority_id' => $priorityId);
				}
				$conditions['AND'][] = $priorityData;
			}

			// //期日範囲の検索
			$lowerDue = '';
			$higherDue = '';
			if (
				!empty($this->request->query['lower_due']['year']) &&
				!empty($this->request->query['lower_due']['month']) &&
				!empty($this->request->query['lower_due']['day'])
			) {
				$yearL = $this->request->query['lower_due']['year'];
				$monthL = $this->request->query['lower_due']['month'];
				$dayL = $this->request->query['lower_due']['day'];
				$lowerDue = sprintf('%s-%s-%s', $yearL, $monthL, $dayL);
			}

			if (
				!empty($this->request->query['lower_due']['year']) &&
				!empty($this->request->query['lower_due']['month']) &&
				!empty($this->request->query['lower_due']['day'])
			) {
				$yearH = $this->request->query['higher_due']['year'];
				$monthH = $this->request->query['higher_due']['month'];
				$dayH = $this->request->query['higher_due']['day'];
				$higherDue = sprintf('%s-%s-%s', $yearH, $monthH, $dayH);
			}

			if (!empty($lowerDue) && !empty($higherDue)) {
				//下限と上限の両方が指定されている場合
				$conditions['AND'][] = array('Todo.due BETWEEN ? AND ?' => array($lowerDue, $higherDue));
			} elseif (!empty($lowerDue)) {
				//下限のみが設定されている場合
				$conditions['AND'][] = array('Todo.due >=' => $lowerDue);
			} elseif (!empty($higherDue)) {
				//上限のみが設定されている場合
				$conditions['AND'][] = array('Todo.due <=' => $higherDue);
			}

			//並び替え条件
			$order = [];
			if (!empty($this->request->query['sort']) && !empty($this->request->query['order'])) {
				$sortCriteria = [
					'id' => 'Todo.id',
					'name' => 'Todo.name',
					'priority_id' => 'Todo.id',
					'due' => 'Todo.due',
					'created' => 'Todo.created',
					'modified' => 'Todo.modified'
				];

				$sort = $this->request->query['sort'];
				$orderDirection = $this->request->query['order'];
				if (array_key_exists($sort, $sortCriteria)) {
					$order = [$sortCriteria[$sort] => $orderDirection];
				}
			}

			$this->paginate = array(
				'limit' => $limit,
				'conditions' => $conditions,
				'order' => $order,
			);


			// $this->Session->write('session.index_search', $this->request->query['search']);
			// $this->Session->write('session.index_priority_id', $this->request->query['priority_id']);
			// $this->Session->write('session.index_lower_due', $this->request->query['lower_due']);
			// $this->Session->write('session.index_higher_due', $this->request->query['higher_due']);
			// $this->Session->write('session.index_sort', $this->request->query['sort']);
			// $this->Session->write('session.index_order', $this->request->query['order']);

			$todos = $this->paginate('Todo');
			$this->set('todos', $todos);
		} else {
			$this->paginate = array(
				'limit' => $limit,
			);
			$todos = $this->paginate('Todo');
			$this->set('todos', $todos);
		}
	}


// File: Model/Todo.php

App::uses('AppModel', 'Model');

class Todo extends AppModel {

    public function validateSearch($data = array()) {
        $valid = true;

        // キーワード検索の検証
        if (isset($data['search']) && !is_string($data['search'])) {
            $valid = false;
        }

        // 優先度の検証
        if (isset($data['priority_id']) && !is_array($data['priority_id'])) {
            $valid = false;
        }

        // 期日下限の検証
        if (isset($data['lower_due']) && !$this->validateDate($data['lower_due'])) {
            $valid = false;
        }

        // 期日上限の検証
        if (isset($data['higher_due']) && !$this->validateDate($data['higher_due'])) {
            $valid = false;
        }

        // その他の検証ルールをここに追加...

        return $valid;
    }

    private function validateDate($date) {
        // 日付の形式検証ロジック
        // この関数は、$dateが適切な日付形式であるかを検証する
        return true; // 仮の実装
    }
}
